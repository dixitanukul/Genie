# Databricks notebook source
# ===== LAUNCH STREAMLIT (from /tmp, set HOME + CONFIG DIRS) =====
# Installs only missing packages before launching Streamlit.

import sys, importlib.util, subprocess, os, shlex, time, pathlib, shutil

REQUIRED_PYPI = [
    ("streamlit",                  "streamlit"),
    ("pandas",                     "pandas"),                     # <-- added (required by core)
    ("openai",                     "openai"),
    ("databricks.sql",             "databricks-sql-connector"),  # Warehouse connector
    # ("databricks",               "databricks-sdk"),            # optional; not needed for this app
]

def _is_installed(import_name: str) -> bool:
    return importlib.util.find_spec(import_name) is not None

def _ensure_deps():
    missing = [pip_name for import_name, pip_name in REQUIRED_PYPI if not _is_installed(import_name)]
    if not missing:
        print("✅ All required packages already installed:", ", ".join(p for _, p in REQUIRED_PYPI))
        return
    print("📦 Installing missing packages:", ", ".join(missing))
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", *missing])
    print("✅ Package install finished.")

_ensure_deps()

# ---------- Paths ----------
APP_PATH  = "/tmp/streamlit_app_mhr.py"
LOG_PATH  = "/tmp/streamlit_app_mhr.log"
PORT      = 8501

# ---------- Copy latest app files to /tmp BEFORE launch ----------
uc_streamlit = "/Workspace/Users/pdevis01@blueshieldca.com/Genie/app_v2.py"
uc_mainlogic = "/Workspace/Users/pdevis01@blueshieldca.com/Genie/api_utils.py"

driver_streamlit = "/tmp/streamlit_app_mhr.py"
driver_mainlogic = "/tmp/main_logic_mhr.py"  # <-- must match `import main_logic_sqlwh`

os.makedirs("/tmp", exist_ok=True)
shutil.copy(uc_streamlit, driver_streamlit)
shutil.copy(uc_mainlogic, driver_mainlogic)

print("Copied to driver:")
print(" -", driver_streamlit)
print(" -", driver_mainlogic)

# ---------- Streamlit config under /tmp ----------
os.makedirs("/tmp/.streamlit", exist_ok=True)
pathlib.Path("/tmp/.streamlit/secrets.toml").write_text("", encoding="utf-8")
pathlib.Path("/tmp/.streamlit/config.toml").write_text('browser.gatherUsageStats = false\n', encoding="utf-8")

# ---------- Databricks proxy URL + API token ----------
ctx = dbutils.notebook.entry_point.getDbutils().notebook().getContext()
_get = lambda o: o.get() if o and o.isDefined() else None
workspace_url = spark.conf.get("spark.databricks.workspaceUrl")
cluster_id    = spark.conf.get("spark.databricks.clusterUsageTags.clusterId")
workspace_id  = _get(ctx.workspaceId()) or _get(ctx.tags().get("orgId"))
api_token     = _get(ctx.apiToken())

proxy_url = f"https://{workspace_url}/driver-proxy/o/{workspace_id}/{cluster_id}/{PORT}/"
print("🔗 Open your Streamlit app:", proxy_url)
print("📄 App:", APP_PATH)

# ---------- Environment for the Streamlit child process ----------
env = os.environ.copy()

# Keep Streamlit entirely under /tmp
env["HOME"] = "/tmp"
env["STREAMLIT_CONFIG_DIR"] = "/tmp/.streamlit"
env["STREAMLIT_SECRETS_FILE"] = "/tmp/.streamlit/secrets.toml"

# Make /tmp importable so `import main_logic_sqlwh` works
env["PYTHONPATH"] = (env.get("PYTHONPATH", "") + (":" if env.get("PYTHONPATH") else "") + "/tmp")

# Export token + host so model serving client works
if api_token:
    env["DATABRICKS_TOKEN"] = api_token
env["DATABRICKS_HOST"] = f"https://{workspace_url}"

# ✅ Prefer env-provided SQL Warehouse settings; app sidebar can also set them later
if "DATABRICKS_SQL_HOSTNAME" not in env or "DATABRICKS_WAREHOUSE_HTTP_PATH" not in env:
    print("ℹ️ SQL Warehouse host/http_path not supplied via env; set DATABRICKS_SQL_HOSTNAME and DATABRICKS_WAREHOUSE_HTTP_PATH to override.")
print("🔧 SQL Warehouse:", env.get("DATABRICKS_SQL_HOSTNAME", "<unset>"), env.get("DATABRICKS_WAREHOUSE_HTTP_PATH", "<unset>"))

# ---------- Launch Streamlit ----------
cmd = (
    f"cd /tmp && "
    f"streamlit run {shlex.quote(APP_PATH)} "
    f"--server.port {PORT} --server.address 0.0.0.0 --server.headless true "
    f"> {shlex.quote(LOG_PATH)} 2>&1 & echo $!"
)

pid = subprocess.check_output(cmd, shell=True, text=True, env=env).strip()
print("🚀 PID:", pid)

time.sleep(3)
