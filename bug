# Databricks notebook source
# MAGIC %md
# MAGIC ### Genie Modular App ‚Äî Simplified Launcher
# MAGIC This notebook launches your Streamlit app and prints only the working proxy URL.

# COMMAND ----------

import os, subprocess, time, shlex

APP_PATH   = "/Workspace/Users/adixit01@blueshieldca.com/Genie_modular/anukul_genie/app.py"
UTILS_PATH = "/Workspace/Users/adixit01@blueshieldca.com/Genie_modular/anukul_genie/api_utils.py"
PORT       = "8501"

# Verify both files exist
for p in (APP_PATH, UTILS_PATH):
    if not os.path.exists(p):
        raise FileNotFoundError(f"Not found: {p}")
print("‚úÖ Verified app files exist.")

# COMMAND ----------

# Start Streamlit in background
cmd = f"streamlit run {shlex.quote(APP_PATH)} --server.port {PORT} --server.address 0.0.0.0"
print("Launching:", cmd)
proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

time.sleep(5)  # wait for server to boot
print("‚úÖ Streamlit app started.")

# COMMAND ----------

# Build the known working proxy URL (the 2nd style)
def _get(conf_key, default=""):
    try:
        return spark.conf.get(conf_key)
    except Exception:
        return default

workspace_host = _get("spark.databricks.workspaceUrl")
org_id         = _get("spark.databricks.workspaceId") or _get("spark.databricks.clusterUsageTags.orgId")
cluster_id     = _get("spark.databricks.clusterUsageTags.clusterId")

if workspace_host and org_id and cluster_id:
    url = f"https://{workspace_host}/driver-proxy/o/{org_id}/{cluster_id}/{PORT}/"
    print("üîó Open your app here:")
    print(url)
else:
    print("‚ö†Ô∏è Could not build URL ‚Äî missing host/org/cluster info from Spark conf.")

# COMMAND ----------

# (Optional) stream logs
import threading, sys
def _pipe(stream):
    for line in iter(stream.readline, b""):
        sys.stdout.write(line.decode(errors="ignore"))
        sys.stdout.flush()

t = threading.Thread(target=_pipe, args=(proc.stdout,), daemon=True)
t.start()
print("üìú Streaming Streamlit logs below‚Ä¶")
