import streamlit as st
import pandas as pd
import time
import random
import os
import requests
from io import StringIO

# =========================================================
# Page setup (UI only)
# =========================================================
st.set_page_config(
    page_title="üí¨ Smart Data Assistant",
    page_icon="üí¨",
    layout="wide",
    menu_items={
        "Report a bug": "mailto:your-team@example.com",
        "About": "Smart Data Assistant ‚Ä¢ Databricks Genie helper ‚Ä¢ Streamlit UI"
    }
)

# =========================================================
# CSS ‚Äî modern, dark-mode friendly, responsive
# (UI only; no change to business logic)
# =========================================================
st.markdown("""
<style>
/* --- Base tweaks --- */
:root {
  --brand: #5b8def;         /* primary */
  --brand-ink: #173b8b;     /* darker */
  --bg: #f7f8fb;            /* light surface */
  --ink: #0f172a;
  --muted: #64748b;
  --card: #ffffff;
  --ring: rgba(91, 141, 239, 0.25);
}

@media (prefers-color-scheme: dark) {
  :root {
    --bg: #0b1220;
    --ink: #e2e8f0;
    --muted: #94a3b8;
    --card: #111827;
    --ring: rgba(91, 141, 239, 0.25);
  }
}

html, body, [data-testid="stAppViewContainer"] {
  background: linear-gradient(135deg, var(--bg), rgba(91,141,239,0.05));
}

.block-container {
  padding-top: 1rem;
  padding-bottom: 3.5rem;
}

/* --- Header bar --- */
.hero {
  background: linear-gradient(180deg, rgba(91,141,239,0.10), transparent);
  border: 1px solid rgba(99,102,241,0.10);
  border-radius: 20px;
  padding: 1.25rem 1.25rem;
  margin-bottom: 1rem;
}

.hero h1 {
  margin: 0;
  font-weight: 800;
  letter-spacing: -0.02em;
}

.hero-sub {
  margin-top: .35rem;
  color: var(--muted);
}

/* --- Input area --- */
.input-slab {
  background: var(--card);
  border: 1px solid rgba(2,6,23,0.06);
  box-shadow: 0 6px 24px rgba(2,6,23,0.06);
  border-radius: 16px;
  padding: .9rem;
  margin-bottom: 1rem;
}

/* --- Chat card --- */
.chat-container {
  background: var(--card);
  border: 1px solid rgba(2,6,23,0.06);
  border-radius: 16px;
  padding: 1rem;
  margin-bottom: .9rem;
  box-shadow: 0 6px 24px rgba(2,6,23,0.06);
}

.badge {
  display: inline-flex;
  gap: .5rem;
  align-items: center;
  padding: .2rem .55rem;
  border-radius: 999px;
  font-size: .75rem;
  line-height: 1rem;
  background: rgba(91,141,239,0.12);
  color: var(--brand-ink);
  border: 1px solid rgba(91,141,239,0.20);
}

.question-box {
    background: linear-gradient(180deg, rgba(232,240,254,0.75), rgba(232,240,254,0.35));
    padding: .9rem;
    border-radius: 12px;
    font-weight: 600;
    color: #1a237e;
    border: 1px solid rgba(26,35,126,0.08);
}

.answer-box {
    background: linear-gradient(180deg, rgba(255,255,255,0.60), rgba(255,255,255,0.25));
    padding: .9rem;
    border-radius: 12px;
    color: var(--ink);
    border: 1px solid rgba(2,6,23,0.06);
}

.sql-box {
    background-color: #0b1020;
    color: #e2e8f0;
    padding: .8rem;
    border-radius: 10px;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    border: 1px solid rgba(148,163,184,0.25);
    overflow-x: auto;
}

/* --- Feedback buttons --- */
.feedback-row button[kind="secondary"] {
    border: 1px solid rgba(2,6,23,0.10);
    background: linear-gradient(180deg, rgba(2,6,23,0.03), rgba(2,6,23,0.01));
}

.feedback-row .stButton>button {
    border-radius: 10px !important;
}

/* --- Pill buttons --- */
.btn-primary .stButton>button {
  width: 100%;
  font-weight: 700;
  border-radius: 12px;
  border: 1px solid rgba(2,6,23,0.08);
  background: linear-gradient(180deg, var(--brand), #4b78d7);
  color: #ffffff;
  box-shadow: 0 6px 20px rgba(91,141,239,0.35);
}

.btn-primary .stButton>button:hover {
  filter: brightness(1.03);
}

/* --- Small helpers --- */
.hr-soft {
  height: 1px;
  border: 0;
  background: linear-gradient(90deg, transparent, rgba(2,6,23,0.12), transparent);
  margin: 1rem 0 0.5rem 0;
}
.mono {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}
.dim { color: var(--muted); }

/* tighten dataframe header */
[data-testid="stDataFrame"] div[data-testid="stHeader"] {
  background: transparent;
}

/* cards hover */
.chat-container:hover {
  border-color: rgba(91,141,239,0.28);
  box-shadow: 0 8px 28px rgba(91,141,239,0.15);
}
</style>
""", unsafe_allow_html=True)

# =========================================================
# Session state (unchanged logic)
# =========================================================
if "user_access_token" not in st.session_state:
    st.session_state.user_access_token = os.environ.get("DATABRICKS_TOKEN")
host_name = "https://adb-640321604414221.1.azuredatabricks.net"
space_id='01f0a7f4557013988ce0f20db008067e'
Conversation_url = f"{host_name}/api/2.0/genie/spaces/{space_id}/start-conversation"

if "conversation_id" not in st.session_state:
    st.session_state.conversation_id = None
if "show_sql" not in st.session_state:
    st.session_state.show_sql = {}
if "message_id" not in st.session_state:
    st.session_state.message_id = None
if "qa_history" not in st.session_state:
    st.session_state.qa_history = []

# =========================================================
# Backend calls (unchanged logic)
# =========================================================
def New_Chat(user_input):
    response = requests.post(
        Conversation_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        },
        json={"content": user_input}
    )
    conversation_id = response.json().get("conversation_id")
    message_id = response.json().get("message_id")
    return conversation_id, message_id

def fetch_question_response(conversation_id, message_id):
    response_url =  f"{host_name}/api/2.0/genie/spaces/{space_id}/conversations/{conversation_id}/messages/{message_id}"
    query_response = requests.get(
        response_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        }
    )
    return query_response

def fetch_results(conversation_id, message_id, attachment_id):
    execute_url = f"{host_name}/api/2.0/genie/spaces/{space_id}/conversations/{conversation_id}/messages/{message_id}/attachments/{attachment_id}/execute-query"
    results = requests.post(
        execute_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        }
    )
    return results

def get_data (conversation_id, message_id, attachment_id):
    get_data_url = f"{host_name}/api/2.0/genie/spaces/{space_id}/conversations/{conversation_id}/messages/{message_id}/attachments/{attachment_id}/query-result"
    results = requests.get(
        get_data_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        }
    )
    return results

def context_chat(user_input, conversation_id):
    message_url = f"{host_name}/api/2.0/genie/spaces/{space_id}/conversations/{conversation_id}/messages"
    response = requests.post(
        message_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        },
        json={"content": user_input}
    )
    message_id = response.json().get("message_id")
    return response.json(), message_id

def feedback(conversation_id, message_id, feedback_res):
    st.write("feedback_res is ", feedback_res)
    feedback_url = f"{host_name}/api/2.0/genie/spaces/{space_id}/conversations/{conversation_id}/messages/{message_id}/feedback"
    response = requests.post(
        feedback_url,
        headers={
            "Authorization": f"Bearer {st.session_state.user_access_token}",
            "Content-Type": "application/json"
        },
        json={"rating": feedback_res}
    )
    return response.json()

# --- Dummy backend (unchanged logic) ---
def generate_answer(question):
    simulated_responses = [
        "Sure! Let‚Äôs pull up the data for that.",
        "Fetching the information you requested‚Ä¶",
        "Here‚Äôs what I found in the dataset."
    ]
    answer_text = random.choice(simulated_responses)
    return answer_text

# =========================================================
# Sidebar (UI only)
# =========================================================
with st.sidebar:
    st.markdown("### ‚öôÔ∏è Session")
    token_ok = bool(st.session_state.user_access_token)
    st.markdown(
        f"- **Databricks token:** {'‚úÖ Found' if token_ok else '‚ùå Missing'}\n"
        f"- **Space ID:** `{space_id}`\n"
        f"- **Host:** `{host_name.replace('https://','')}`"
    )
    st.markdown("---")
    st.caption("Tip: Use Enter to submit. Toggle SQL to inspect queries, and download results if needed.")

# =========================================================
# Header (UI only)
# =========================================================
st.markdown(
    """
    <div class="hero">
      <div style="display:flex;align-items:center;gap:.6rem;flex-wrap:wrap;">
        <span class="badge">üí¨ Smart Data Assistant</span>
      </div>
      <h1>Ask questions. Get data-backed answers.</h1>
      <div class="hero-sub">Databricks Genie + Streamlit. Cleaner, friendlier interface ‚Äî same logic under the hood.</div>
    </div>
    """,
    unsafe_allow_html=True
)

# =========================================================
# Input section (UI only)
# =========================================================
with st.container():
    st.markdown('<div class="input-slab">', unsafe_allow_html=True)
    cols = st.columns([8, 1.2, 1.2])
    user_input = cols[0].text_input(
        "Ask me anything:",
        placeholder="e.g., Show me top scoring students...",
        label_visibility="collapsed"
    )
    with cols[1]:
        submit = st.button("Send üöÄ", use_container_width=True)
    with cols[2]:
        # purely UI helper to visually separate actions
        st.write("")
        st.write("")
        st.caption("")

    st.markdown('</div>', unsafe_allow_html=True)

# =========================================================
# Submit handling (logic unchanged, just UI refinements)
# =========================================================
if submit and user_input.strip():
    with st.spinner("Thinking..."):
        # Prepend empty message for immediate visual slot
        st.session_state.qa_history.insert(0, {
            "question": user_input,
            "answer_text": "",
            "answer_df": None,
            "sql": "",
            "feedback": None
        })

        # Start or continue conversation (unchanged)
        if st.session_state.conversation_id is None:
            st.session_state.conversation_id, st.session_state.message_id = New_Chat(user_input)
            conversation_id = st.session_state.conversation_id
            message_id = st.session_state.message_id
        else:
            response, st.session_state.message_id = context_chat(user_input, st.session_state.conversation_id)
            message_id = st.session_state.message_id
            st.caption("‚Ü™Ô∏è Continuing existing conversation")

        # Poll message status (unchanged)
        query_response = fetch_question_response(st.session_state.conversation_id, message_id)
        while True:
            query_response = fetch_question_response(st.session_state.conversation_id, message_id)
            data = query_response.json()
            time.sleep(5)
            with st.spinner(data.get("status")):
                if data.get("status") in ("COMPLETED", "FAILED"):
                    break

        # Extract SQL + execute (unchanged)
        SQL = data.get("attachments")[0]["query"]["query"]
        attachment_id = data.get("attachments")[0]["attachment_id"]
        _ = fetch_results(st.session_state.conversation_id, message_id, attachment_id)

        # Poll for results (unchanged)
        result_fetch = get_data(st.session_state.conversation_id, message_id, attachment_id)
        while True:
            query_response = get_data(st.session_state.conversation_id, message_id, attachment_id)
            data = query_response.json()
            state = data["statement_response"]["status"]["state"]
            if state in ("SUCCEEDED", "FAILED "):
                break

        # Format dataframe (unchanged)
        columns = data["statement_response"]["manifest"]["schema"]["columns"]
        col_names = [col["name"] for col in columns]
        rows = data["statement_response"]["result"]["data_array"]
        Answer = pd.DataFrame(rows, columns=col_names)

        # Typewriter effect (unchanged)
        answer_text = generate_answer(user_input)
        partial_text = ""
        for ch in answer_text:
            partial_text += ch
            st.session_state.qa_history[0]["answer_text"] = partial_text
            time.sleep(0.03)

        # Save results into message slot (unchanged)
        st.session_state.qa_history[0]["answer_df"] = Answer
        st.session_state.qa_history[0]["sql"] = SQL

        # Trim history if large (unchanged)
        if len(st.session_state.qa_history) > 50:
            st.session_state.qa_history = st.session_state.qa_history[:50]

# =========================================================
# Chat history render (UI only)
# =========================================================
for i, qa in enumerate(st.session_state.qa_history):
    with st.container():
        st.markdown(f"<div class='chat-container'>", unsafe_allow_html=True)

        # Header row with tiny badges and index
        top_cols = st.columns([0.7, 7.6, 1.7])
        with top_cols[0]:
            st.markdown(f"<span class='badge mono'>#{len(st.session_state.qa_history)-i}</span>", unsafe_allow_html=True)
        with top_cols[1]:
            st.caption("")
        with top_cols[2]:
            if qa["answer_df"] is not None and not qa["answer_df"].empty:
                csv_buf = StringIO()
                qa["answer_df"].to_csv(csv_buf, index=False)
                st.download_button("Download CSV", data=csv_buf.getvalue(), file_name="answer.csv", mime="text/csv", key=f"dl_{i}", use_container_width=True)

        cols = st.columns(2, vertical_alignment="top")

        # Question bubble
        with cols[0]:
            st.markdown(f"<div class='question-box'>üß† {qa['question']}</div>", unsafe_allow_html=True)

        # Answer bubble + table + SQL controls
        with cols[1]:
            st.markdown(f"<div class='answer-box'>{qa['answer_text']}</div>", unsafe_allow_html=True)

            if qa["answer_df"] is not None:
                st.markdown("<div class='hr-soft'></div>", unsafe_allow_html=True)
                st.caption("Result")
                st.dataframe(qa["answer_df"], use_container_width=True, height=280)

                # SQL controls row
                ctrl_cols = st.columns([1.2, 1.1, 3.7, 3.0])
                with ctrl_cols[0]:
                    if st.button(
                        "Show SQL" if not st.session_state.show_sql.get(i) else "Hide SQL",
                        key=f"sqlbtn_{i}",
                        use_container_width=True
                    ):
                        st.session_state.show_sql[i] = not st.session_state.show_sql.get(i, False)
                with ctrl_cols[1]:
                    # Copy SQL to clipboard is not directly possible; instead show a code block button below.
                    # As a UI helper, put SQL into a text area when shown, easy to Cmd/Ctrl+C.
                    st.caption("")
                with ctrl_cols[2]:
                    st.caption("")
                with ctrl_cols[3]:
                    if qa.get("sql"):
                        st.download_button(
                            "Download SQL",
                            data=qa["sql"],
                            file_name="query.sql",
                            mime="text/plain",
                            key=f"dlsql_{i}",
                            use_container_width=True
                        )

                # Show SQL pretty (UI only)
                if st.session_state.show_sql.get(i):
                    # Use st.code for nice formatting within a dark box
                    st.markdown("<div class='hr-soft'></div>", unsafe_allow_html=True)
                    st.caption("SQL")
                    st.code(qa["sql"], language="sql")

                # Feedback row
                fcols = st.columns([1, 1, 1, 6], vertical_alignment="center")
                with fcols[0]:
                    if st.button("üëç", key=f"good_{i}", help="Mark helpful"):
                        qa["feedback"] = "POSITIVE"
                        feedback(st.session_state.conversation_id, st.session_state.message_id, "POSITIVE")
                        st.toast("Thanks for the üëç", icon="‚úÖ")
                with fcols[1]:
                    if st.button("üòê", key=f"neutral_{i}", help="Mark neutral"):
                        qa["feedback"] = "Neutral"
                        feedback(st.session_state.conversation_id, st.session_state.message_id, "NONE")
                        st.toast("Feedback recorded", icon="‚ú≥Ô∏è")
                with fcols[2]:
                    if st.button("üëé", key=f"bad_{i}", help="Mark not helpful"):
                        qa["feedback"] = "NEGATIVE"
                        feedback(st.session_state.conversation_id, st.session_state.message_id, "NEGATIVE")
                        st.toast("We‚Äôll improve this.", icon="‚ö†Ô∏è")
                with fcols[3]:
                    if qa["feedback"]:
                        st.markdown(f"**Feedback:** {qa['feedback']}")

        st.markdown("</div>", unsafe_allow_html=True)

st.markdown("<hr class='hr-soft'/>", unsafe_allow_html=True)
st.caption("‚ú® Refreshed UI ‚Ä¢ Same functionality. Enjoy!")
